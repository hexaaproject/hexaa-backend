<?php

/**
 * Copyright 2014-2018 MTA SZTAKI, ugyeletes@sztaki.hu
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace Hexaa\StorageBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * RolePrincipalRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RolePrincipalRepository extends EntityRepository
{

    public function findAllByOrganizationAndPrincipal(Organization $o, Principal $p, $limit = null, $offset = 0)
    {
        $rps = $this->getEntityManager()->createQueryBuilder()
          ->select('rp')
          ->from('HexaaStorageBundle:RolePrincipal', 'rp')
          ->innerJoin('rp.role', 'r')
          ->where('r.organization = :o')
          ->andWhere('rp.principal = :p')
          ->setFirstResult($offset)
          ->setMaxResults($limit)
          ->setParameters(array('o' => $o, 'p' => $p))
          ->getQuery()
          ->getResult();

        return $rps;
    }

    public function findAllByOrganizationAndPrincipalStrict(Organization $o, Principal $p, $limit = null, $offset = 0)
    {
        $rps = $this->getEntityManager()->createQueryBuilder()
          ->select('rp')
          ->from('HexaaStorageBundle:RolePrincipal', 'rp')
          ->innerJoin('rp.role', 'r')
          ->where('r.organization = :o')
          ->andWhere('rp.principal = :p')
          ->andWhere('(r.startDate <= :now or r.startDate is null)')
          ->andWhere('(r.endDate >= :now or r.endDate is null)')
          ->setFirstResult($offset)
          ->setMaxResults($limit)
          ->setParameters(array('o' => $o, 'p' => $p, 'now' => new \DateTime('now')))
          ->getQuery()
          ->getResult();

        return $rps;
    }

}
