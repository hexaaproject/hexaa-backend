<?php

/**
 * Copyright 2014-2018 MTA SZTAKI, ugyeletes@sztaki.hu
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace Hexaa\StorageBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * OrganizationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrganizationRepository extends EntityRepository
{

    public function findAllByMember(Principal $p, $limit = null, $offset = 0)
    {
        return $this->getEntityManager()->createQueryBuilder()
          ->select('o')
          ->from('HexaaStorageBundle:Organization', 'o')
          ->innerJoin('o.principals', 'm')
          ->where(':p MEMBER OF o.principals')
          ->setFirstResult($offset)
          ->setMaxResults($limit)
          ->orderBy("o.name", "ASC")
          ->setParameters(array(":p" => $p))
          ->getQuery()
          ->getResult();
    }

    public function findAllByRelatedPrincipalAndService(Principal $p, Service $s, $limit = null, $offset = 0)
    {
        $os = $this->getEntityManager()->createQueryBuilder()
          ->select('o')
          ->from('HexaaStorageBundle:Organization', 'o')
          ->leftJoin('o.links', 'link')
          ->leftJoin('link.service', 's')
          ->where(':p MEMBER OF o.principals ')
          ->andWhere("link.status='accepted'")
          ->andWhere("s.isEnabled=true")
          ->andWhere(':serv = s')
          ->setFirstResult($offset)
          ->setMaxResults($limit)
          ->orderBy("o.name", "ASC")
          ->setParameters(array("p" => $p, 'serv' => $s))
          ->getQuery()
          ->getResult();

        return $os;
    }

    public function getIdsByEntitlementPack(EntitlementPack $ep)
    {
        $ids = $this->getEntityManager()->createQueryBuilder()
          ->select('o.id')
          ->from("HexaaStorageBundle:Organization", "o")
          ->leftJoin("o.links", "link")
          ->where(":ep MEMBER OF link.entitlementPacks")
          ->setParameter(":ep", $ep)
          ->getQuery()
          ->getScalarResult();
        $oIds = array();
        foreach ($ids as $id) {
            $oIds[] = $id['id'];
        }

        return $oIds;
    }
}
